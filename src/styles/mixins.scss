@import './reset.scss';

@mixin fit {
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@mixin responsive-font($min-size: $font-size-min, $size: $font-size, $limit: $page-limit) {
  $unitless-min: strip-unit($min-size);
  $unitless-size: strip-unit($size);
  $baseline: strip-unit($min-mobile);

  $font-multiplier: (($unitless-size - $unitless-min) / (strip-unit($limit) - $baseline));
  $font-baseline: ($unitless-min - $font-multiplier * $baseline);

  @if $unitless-min >= $unitless-size {
    @warn 'Responsive font: min-size equal or greater than size';
  }

  font-size: #{$unitless-min}px;
  font-size: calc(#{$unitless-min}px * #{var(--scale-font)});

  @media (min-width: $min-mobile) {
    font-size: #{$unitless-min}px;
    font-size: calc((#{$font-multiplier} * #{100vw} + (#{$font-baseline}px)) * #{var(--scale-font)});
  }

  @media (min-width: $limit) {
    font-size: #{$unitless-size}px;
    font-size: calc(#{$unitless-size}px * #{var(--scale-font)});
  }
}

@mixin container() {
  margin: 0 auto;

  padding-left: $container-gutter-mobile;
  padding-right: $container-gutter-mobile;

  max-width: $page-width + $container-gutter-mobile * 1;

  @media (min-width: $min-mobile) {
    max-width: $page-width + $container-gutter-mobile * 2;
  }

  @media (min-width: $min-tablet) {
    padding-left: $container-gutter-tablet;
    padding-right: $container-gutter-tablet;
    max-width: $page-width + $container-gutter-tablet * 2;
  }

  @media (min-width: $min-desktop) {
    padding-left: $container-gutter-desktop;
    padding-right: $container-gutter-desktop;
    max-width: $page-width + $container-gutter-desktop * 2;
  }
}

// change below to reflect your project
@mixin heading() {
  @include reset-heading;
  @include responsive-font(28, 38);

  color: #000;
  font-family: $font-family-heading;
  font-weight: 200;
  letter-spacing: -((0.5/38) * 1em);
  line-height: 1.25;
}

@mixin subheading() {
  @include heading;

  margin-bottom: (40/38) * 1em;

  color: $color-grey;
  font-weight: 100;
}

@mixin h2() {
  @include reset-heading;
  @include responsive-font(26, 32);

  margin-bottom: (40/32) * 1em;

  font-family: $font-family;
  font-weight: 500;
  line-height: 1.25;
  color: #000;
}

@mixin h3() {
  @include h2;
  @include responsive-font(20, 26);
}

@mixin link() {
  display: inline;
  color: #000;

  cursor: pointer;

  background-image: linear-gradient(to right, currentColor, currentColor);
  background-position: 0 percentage(18px/$font-size);
  background-repeat: repeat-x;
  background-size: 100% 1px;

  @media (pointer: fine) {
    &:hover {
      color: $color-grey;
      // force redraw in chome for currentColor
      -webkit-margin-start: 0.1px; // stylelint-disable-line
    }
  }
}

// html.js / html.no-js will not compile?!
// hence these workaround selectors
@mixin js-only {
  html:not(:global(.no-js)) & {
    @content;
  }
}

@mixin no-js {
  html:not(:global(.js)) & {
    @content;
  }
}

// gsap trans-in defaults
@mixin will-animate($transform: true, $opacity: true) {

  @include js-only {
    @if $opacity == true {
      opacity: 0;
    }

    @if $transform == true {
      will-change: opacity, transform;
    }

    @else {
      will-change: opacity;
    }
  }
}
